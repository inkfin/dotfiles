# CodeWhisperer pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.pre.zsh"

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="agnoster"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many pluginsBreadcrumbsBreadcrumbs slow down shell startup.
plugins=(git git-open tmux colored-man-pages zsh-syntax-highlighting zsh-autosuggestions extract cp safe-paste command-not-found vi-mode zsh_codex rust)

source $ZSH/oh-my-zsh.sh

# User configuration

# OpenAI completion codex
bindkey '^X' create_completion


export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nvim'
else
  export EDITOR='nvim'
fi

# Compilation flags
#export ARCHFLAGS="-arch x86_64"



# ==================================================
# === Aliases
# ==================================================
# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

alias pac="brew"
alias ee="exit"
alias vimfish="nvim ~/.local/share/chezmoi/dot_config/fish/config.fish"
alias vimzsh="nvim ~/.local/share/chezmoi/.zshrc_darwin"
alias vimrc="nvim ~/.local/share/chezmoi/dot_config/nvim/init.lua"
alias rimerc="nvim ~/.local/share/chezmoi/dot_config/Rime/squirrel.custom.yaml"
alias custom_phrase="nvim ~/.local/share/chezmoi/dot_config/Rime/custom_phrase.txt"
alias sourcezsh="source ~/.zshrc"
# alias nvim="nn"
alias vim="nvim"
alias v="nn"
alias nvi="neovide"
alias cz="chezmoi"
alias cze="chezmoi edit "
alias lg="lazygit"
alias ra="lf"

alias nn="~/.local/neovim/bin/nvim"

# lsd
alias ls="lsd"
alias l="ls -l"
alias la="ls -a"
alias lla="ls -al"
alias lt="ls --tree"
alias li="imgls"

# Proxy
alias sethttpproxy="export http_proxy=http://127.0.0.1:1087"
alias unsethttpproxy="unset http_proxy"
alias sethttpsproxy="export https_proxy=http://127.0.0.1:1087"
alias unsethttpsproxy="unset https_proxy"
alias setallproxy="export ALL_PROXY=socks5://127.0.0.1:1080"
alias unsetallproxy="unset ALL_PROXY=socks5://127.0.0.1:1080"

# the fuck
eval $(thefuck --alias)

# ranger
rag() {
    if [ -z "$RANGER_LEVEL" ]
    then
        ranger
    else
        exit
    fi
}

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
source ~/.config/fzf/fzf_config.zsh

# autojump
[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh

# Intel/ARM brew
alias brew="/opt/homebrew/bin/brew"
alias ibrew="/usr/local/bin/brew"

# homebrew/command-not-found
HB_CNF_HANDLER="$(brew --repository)/Library/Taps/homebrew/homebrew-command-not-found/handler.sh"
if [ -f "$HB_CNF_HANDLER" ]; then
source "$HB_CNF_HANDLER";
fi

# CMake
alias cmc="cmake -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -B"
alias cmcv="cmake -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE=/Users/inkfin/vcpkg/scripts/buildsystems/vcpkg.cmake -B"
alias cmb="cmake --build "


# ==================================================
# === Environment Variables
# ==================================================


# homebrew
export CPPFLAGS="-I/opt/homebrew/include $CPPFLAGS"
export LDFLAGS="-L/opt/homebrew/lib -Wl,-rpath,/opt/homebrew/lib $LDFLAGS"
export PATH="/opt/homebrew/sbin:$PATH"
export HOMEBREW_NO_AUTO_UPDATE=0


# llvm
#---apple-silicon---
export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++ -L/opt/homebrew/opt/llvm/lib $LDFLAGS"
export CPPFLAGS="-I/opt/homebrew/opt/llvm/include $CPPFLAGS"
#---intel---
#export PATH="/usr/local/opt/llvm/bin:$PATH"
#export LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib $LDFLAGS"
#export CPPFLAGS="-I/usr/local/opt/llvm/include $CPPFLAGS"


# CMake
export CMAKE_INCLUDE_PATH="/opt/homebrew/include"
export CMAKE_LIBRARY_PATH="/opt/homebrew/lib"


# vcpkg
export VCPKG_HOME="$HOME/vcpkg"
export PATH="$HOME/vcpkg:$PATH"


# JAVA
export JAVA_20_HOME="/opt/homebrew/opt/openjdk@20/libexec/openjdk.jdk/Contents/Home"
export JAVA_11_HOME="/opt/homebrew/opt/openjdk@11/libexec/openjdk.jdk/Contents/Home"
export JAVA_8_HOME="/opt/homebrew/opt/openjdk@8/libexec/openjdk.jdk/Contents/Home"

export JAVA_HOME=$JAVA_20_HOME
export CPPFLAGS="-I$JAVA_HOME/include"
export PATH="$PATH:$JAVA_HOME/bin"

# Maven
export M2_HOME="/opt/homebrew/opt/maven/libexec"
export PATH="$PATH:$M2_HOME/bin"

# 1Password
export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock


# =======================
# ===== Conda Start =====

#export PATH="/opt/homebrew/Caskroom/miniforge/base/bin:$PATH"  # commented out by conda initialize


# >>> conda initialize >>>

# Anaconda
# !! Contents within this block are managed by 'conda init' !!
#__conda_setup="$('/opt/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
#if [ $? -eq 0 ]; then
    #eval "$__conda_setup"
#else
    #if [ -f "/opt/anaconda3/etc/profile.d/conda.sh" ]; then
        #. "/opt/anaconda3/etc/profile.d/conda.sh"
    #else
        #export PATH="/opt/anaconda3/bin:$PATH"
    #fi
#fi
#unset __conda_setup


# Miniforge
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniforge/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniforge/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# ===== Conda End =====
# =====================



# Rust/Cargo
export PATH="$HOME/.cargo/bin:$PATH"


# Ruby
export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
export PATH="/opt/homebrew/lib/ruby/gems/3.1.0/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/ruby/lib $LDFLAGS"
export CPPFLAGS="-I/opt/homebrew/opt/ruby/include $CPPFLAGS"
export PKG_CONFIG_PATH="/opt/homebrew/opt/ruby/lib/pkgconfig"


# PCL
export PCL_PREFIX="/opt/homebrew/Cellar/pcl/1.12.0_1"


# gnutls
export GUILE_TLS_CERTIFICATE_DIRECTORY="/usr/local/etc/gnutls/"


# guile
export GUILE_LOAD_PATH="/usr/local/share/guile/site/3.0"
export GUILE_LOAD_COMPILED_PATH="/usr/local/lib/guile/3.0/site-ccache"
export GUILE_SYSTEM_EXTENSIONS_PATH="/usr/local/lib/guile/3.0/extensions"


# translate-shell
export HOME_LANG="zh-CN"
export TARGET_LANG="zh-CN"


# OPENCV



# DOCKER
export DOCKER_PATH="/Applications/Docker.app/Contents/Resources/bin"
export PATH="$PATH:$DOCKER_PATH"

# Redis
# To restart redis after an upgrade:
alias restartredis='brew services restart redis'
# Or, if you don't want/need a background service you can just run:
alias stopredis='/opt/homebrew/opt/redis/bin/redis-server /opt/homebrew/etc/redis.conf'


# MacTex
export PATH="$PATH:/usr/local/texlive/2022/bin/universal-darwin"

# Vulkan
source "/usr/local/VulkanSDK/current/setup-env.sh"


# dawn
# depot_tools
export PATH="$HOME/dev/depot_tools:$PATH"


# === MACOS ===
# export SDKROOT="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk"

# MACOS SecureInput
alias MACSecureInput="ioreg -l -d 1 -w 0 | grep SecureInput"

# Miktex
export PATH="$HOME/bin:$PATH"

# Remove Path that requires Permissions
remove_path_from_path() {
    PATH=$(echo "$PATH" | tr ':' '\n' | grep -v "$1" | paste -sd ':' -)
}

# Call the function with the path you want to remove
remove_path_from_path "/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin"
remove_path_from_path "/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin"
remove_path_from_path "/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin"

# Applications
alias typora='open -a Typora.app'
alias sublime='open -a Sublime\ Text.app'

export OPENAI_API_KEY='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'

alias ai='python3 /Users/inkfin/Documents/Code/Python/openaiAPI/app.py'

alias browse='~/.local/carbonyl-0.0.3/carbonyl'


# vcpkg integrate
autoload bashcompinit
bashcompinit
source /Users/inkfin/vcpkg/scripts/vcpkg_completion.zsh


eval "$(starship init zsh)"
eval "$(zoxide init zsh)"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# CodeWhisperer post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/codewhisperer/shell/zshrc.post.zsh"
